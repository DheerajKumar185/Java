Types of Variables

Based on type of value represented by variables. All variables are divided into 2 types.
	1. Primitive variables:	Can be used to represent to primitive values.
		Example 1: int x = 10;

	2. Reference variables:	Can be used to refer objects.
		Example 1: Student s = new Student();
		where s is reference variable

	Based on position of declaration and behaviour all variables are divided into 3 types.
	1. Instance Variables
	2. Static Variables
	3. Local Variables

Instance Variables:
	1. If the value of the variable is varied from object to object such type of variables are called instance variables.
	2. For every object a separate copy of instance variable will be created.
	3. Instance variables should be declare withing the class directly but out side of any method, block or constructor.
	4. Instance variable will be created at the time of object creation and destroyed at the time of object destruction. Hence the scope of
		instance variable is exactly same as the scope of object.
	5. Instance variable will be stored in the heap memory as a part of object.
	6. We can't access instance variables directly from static area but we can access by using object reference.
	7. We can access instance variables directly from instance area.
	Example 1:
		public class Test {
			int x = 10;
			public static void main(String[] args) {
		        System.out.println(x); // Non-static field 'x' cannot be referenced from a static context
				Test t = new Test();
				System.out.println(t.x);
			}

			public void m1() {
				System.out.println(x);
			}
		}
	8. For Instance variable JVM will always provide default values and we are not perform initialization explicitly.
	Example 2:
		public class Test {
			int x;
			double d;
			boolean b;
			String s;
			public static void main(String[] args) {
				Test t = new Test();
				System.out.println(t.x);	// 0
				System.out.println(t.d);	// 0.0
				System.out.println(t.b);	// false
				System.out.println(t.s);	// null
			}
		}
	9. Instance variables also known as object level variable or attribute.

Static Variables:
	1. If the value of a variable is not varied from object to object then it's not recommended to declare variable as instance variable.
		We have to declare such type of variable at class level by using static modifiers.
	2. In the case of instance variables for every object a separate copy will be created but in the case of static variable a single copy
		will be created at class level and shared by every object of the class.
	3. Static variable should be declare within the class directly but out side of any method or block or constructor.
	4. Static variables will be created at the time of class loading and destroyed at the time of class unloading. Hence scope of static
		variable is exactly same as scope of .class file.
	5. Static variables will be stored in method area.
	6. We can access static variable either by object reference or class name but recommended to use class name. Within the same class it is
		not required to use class name and we can access directly.
		Example 1:
			public class Test {
				static int x = 10;
				public static void main(String[] args) {
					Test t = new Test();
					System.out.println(t.x);
					System.out.println(Test.x);
					System.out.println(x);
				}
			}
	7. We can access static variable directly from both instance and static areas.
		Example 2:
			public class Test {
				static int x = 10;
				public static void main(String[] args) {
					System.out.println(x);
				}

				public void m1() {
					System.out.println(x);
				}
			}
	8. For static variables JVM will provide default value and we are not required to perform initialization explicitly.
		Example 3:
			public class Test {
				static int x;
				static double d;
				static String s;
				public static void main(String[] args) {
					System.out.println(x);
					System.out.println(d);
					System.out.println(s);
				}
			}
	9. Static variable is also known as class level variable or field.
		Example 4:
			public class Test {
				static int x;
				int y =20;
				public static void main(String[] args) {
					Test t1 = new Test();
					t1.x = 888;
					t1.y = 999;
					Test t2 = new Test();
					System.out.println(t2.x + "   " + t2.y);
				}
			}

Local Variables:
