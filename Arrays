1. Introduction
2. Array Declaration
3. Array Creation
4. Array Initialization
5. Array Declaration, Creation, Initialization in a single line
6. length vs length()
7. Anonymous arrays
8. Array Element Assignments
9. Array Variable Assignments

Introduction: An arrays is a indexed collection of fixed no of homogeneous data elements. The main advantages of arrays is we can
	represent huge no of values by using single variable so that readability of the code will be improved.
	But main disadvantage of arrays is fixed in size. Once we creates arrays there is no chance of increasing or decreasing of size
	based on our requirement. Hence to use arrays concept compulsory we should know the size in advance, which may not possible always.

Array Declaration:
	One-Dimensional Array: int[] x, int []x, int x[];
	int[] x is recommended because name is clearly separated from type.
	At the time of declaration we can't specify the size otherwise we'll get compile time error.
	Example 1:
		int[6] x; Invalid
		int[] x;

	Two-Dimensional Array: int [][] x, int [][]x, int x[][], int[] []x, int[] x[], int []x[]; all are valid
	Which of the following are valid
	int[] a, b;		a -> 1, b -> 1
	int[] a[], b;	a -> 2, b -> 1
	int[] a[], b[];	a -> 2, b -> 2
	int[] []a, b;	a -> 2, b -> 2
	int[] []a, b[]; a -> 2, b -> 3
	int[] []a, []b;	CTE
	Note: If we want to specify dimension before the variable that facility is applicable only for 1st variable in a declaration. If we are trying
	to apply for remaining variable, we'll get compile time error.
	Example 1: int[] a, []b, []c;

	Three-Dimensional Array:
	int[][][] a; int [][][]a; int a[][][]; int[] [][]a; int[] a[][]; int[] []a[]; int[][] []a; int[][] a[];	int [][]a[]; int []a[][];

Array Creation:
    One-Dimensional Array Creation:
        Every array in java is an object only. Hence we can create arrays by using new operator.
        Example 1: int[] a = new int[3];

        For every array, corresponding classes are available and these classes are part of java language and not available to the programmer level.

        At the time of array creation compulsory we should specify the size, otherwise we'll get compile time error.
        Example 2:
            int[] x = new int[]; //Invalid
            int[] x = new int[6]; //valid

        It is legal to have an array with size 0 in java.
        Example 3:
            int[] x = new int[0];

        If we are trying to specify array size with negative int value then we'll get runtime exception saying negative array size exception.
        Example 4:
            int[] x = new int[-6]; //RTE java.lang.NegativeArraySizeException: -6

        To specify array size the allowed data types are byte, short, char, int. If we are trying to specify any other type then we'll get compile time error.
        Example 5:
            int[] x = new int[6];
            int[] x = new int['a'];
            byte b = 5;
            int[] x = new int[b];
            short s = 10;
            int[] x = new int[s];
            int[] x = new int[10l];	//Compile time error -> error: incompatible types: possible lossy conversion from long to int -> int[] x = new int[3l];

        The maximum allowed array size in java is 2147483647 which is the maximum value of int data type.
        Example 6:
            int[] x = new int[2147483647]; // Valid for compilation, Error may occur at runtime i.e. java.lang.OutOfMemoryError
            int[] x = new int[2147483648]; // Invalid for compilation -> error: integer number too large

    Two-Dimensional Array Creation:
        In java 2 D array not implemented by using matrix style sun people followed array of arrays approach for multi dimensional array creation.
        The main advantage of this approach is memory utilization will be improved.
        Example 1:
            int[][] x = new int[2][];
            x[0] = new int[2];
            x[1] = new int[3];

        Example 2:
            int[][][] x = new int[2][][];
            x[0] = new int[3][];
            x[0][0] = new int[1];
            x[0][1] = new int[2];
            x[0][2] = new int[3];
            x[1] = new int[2][2];

        Which of the following array declaration are valid.
        int[] a = new int[];				// Invalid
        int[] a = new int[3];				// Valid
        int[][] a = new int[][];			// Invalid
        int[][] a = new int[3][];			// Valid
        int[][] a = new int[][4];			// Invalid
        int[][] a = new int[3][4];			// Valid
        int[][][] a = new int[3][4][5];		// Valid
        int[][][] a = new int[3][4][];		// Valid
        int[][][] a = new int[3][] [5];		// Invalid
        int[][][] a = new int[] [4] [5];	// Invalid

Array Initialization:
	Once we creates an array every element by default initialized with default values.
	Example 1:
		int[] x = new int[3];
		System.out.println(x);		// [I@6576fe71
		System.out.println(x[0]);	// 0

	Whenever we are trying to print any reference variable internally toString() method will be called. Which is implemented by default to return
	the string in the following form. className@hashcode_in_hexadecimalform.
	Example 2:
		int[][] x = new int[2][3];
		System.out.println(x);		// [[I@6576fe71
		System.out.println(x[0]);	// [I@76fb509a
		System.out.println(x[0][0]);// 0

	Example 3:
		int[][] x = new int[2][3];
		System.out.println(x);		// [[I@6576fe71
		System.out.println(x[0]);	// null
		System.out.println(x[0][0]);// java.lang.NullPointerException

	If we are perform any operation on null then we'll get run time exception saying java.lang.NullPointerException.

	Once we creates an array every array element by default initialized with default values. If we are not satisfied with default values then we
	can override these values with our customized values.
	Example 4:
		int[] x = new int[6];
		x[0] = 10;
		x[1] = 20;
		x[2] = 30;
		x[3] = 40;
		x[4] = 50;
		x[5] = 60;
		x[6] = 70; // RTE: java.lang.ArrayIndexOutOfBoundsException
		x[-6] = 80; // RTE: java.lang.ArrayIndexOutOfBoundsException
		x[2.5] = 90 // CTE -> error: incompatible types: possible lossy conversion from double to int -> x[2.5] = 90;

	Note: If we are trying to access array element with out of range index (either +ve or -ve int value) then we'll get run time exception saying
	ArrayIndexOutOfBoundsException.

Array Declaration, Creation and Initialization in a single line:
	We can declare, create and initialise an array in a single line (sort-cut representation).
	Example 1:
		int[] x = new int[3];
		x[0] = 10;
		x[1] = 20;
		x[2] = 30;

		int[] x = {10, 20, 30};
		char[] ch = {'a', 'e', 'i', 'o', 'u'};
		String[] s = {"A", "AA", "AAA"};

	We can used this shortcut for multi dimensional array also.
	Example 2:
		int[][] x = {{10, 20}, {30, 40, 50}};

	Example 3:
		int[][][] x = {{{10, 20, 30}, {40, 50, 60}}, {{70, 80}, {90, 100, 110}}};
		System.out.println(x[0][1][2]); // 60
        System.out.println(x[1][0][1]); // 80
        System.out.println(x[2][0][0]); // RTE java.lang.ArrayIndexOutOfBoundsException
        System.out.println(x[1][2][0]); // RTE java.lang.ArrayIndexOutOfBoundsException
        System.out.println(x[1][1][1]); // 100
        System.out.println(x[2][1][0]); //RTE java.lang.ArrayIndexOutOfBoundsException

	If we want to this shortcut, compulsory we should perform all activity in a single line. If we are trying to divide in multiple lines then
	we'll get compile time error.
	Example 4:
		int[] x = {10, 20, 30};
		int[] x;
		x = {10, 20, 30}; // CTE ->
									error: illegal start of expression -> x = {10, 20, 30};
									error: not a statement -> x = {10, 20, 30};
									error: ';' expected -> x = {10, 20, 30};

length vs length():
	length is a final variable applicable for arrays. length variable represents the size of the array.
	Example 1:
		int[] x = new int[6];
		System.out.println(x.length);	// 6
		System.out.println(x.length()); // CTE -> error: cannot find symbol -> System.out.println(x.length());
												symbol:   method length()
												location: variable x of type int[]
	length() is a final method applicable for String object. length() returns number of characters present in the string.
	Example 1:
		String s = "Test";
        System.out.println(s.length);	//CTE -> error: cannot find symbol -> System.out.println(s.length);
														symbol:   variable length
														location: variable s of type String
		System.out.println(s.length()); // 6

	Note: length variable applicable for arrays but not for String objects. Where as length() method applicable for String object but not for Arrays.

	String[] s = {"A", "AA", "AAA"};
	System.out.println(s.length);		// 3
	System.out.println(s.length());		// CTE -> error: cannot find symbol -> System.out.println(s.length());
												symbol:   method length()
												location: variable s of type String[]
	System.out.println(s[0].length);	// CTE ->  error: cannot find symbol -> System.out.println(s[0].length);
												symbol:   variable length
												location: class String
	System.out.println(s[0].length());	// 1

	In multi dimensional array length variable represent only base size but not total size.
	Example 1:
		int[][] x = new int[6][3];
        System.out.println(x.length);	// 6
        System.out.println(x[0].length);// 3

	There is not direct way to find total length of multi dimensional array. But indirectly we can find as follows.
	Example 2:
		x[0].length, x[1].length, x[2].length; ...

Anonymous Arrays:
	Some times we can declare an array without name. Such type of name less arrays are called anonymous arrays.
	The main purpose of anonymous arrays is just for instant use (one time uses).

	We can create anonymous arrays as follows: new int[]{10, 20, 30, 40};
	Example 1:
        public static void main(String[] args) {
            sum(new int[]{10, 20, 30, 40});
        }

    Example 1:
        public static void sum(int[] x) {
            int total = 0;
            for(int x1 :x) {
                total = total + x1;
            }
            System.out.println("The sum: " + total);
        }

	While creating anonymous arrays we can't specify the size, otherwise we'll get compile time error.
	new int[3]{10, 20, 30} // Invalid
	new int[]{10, 20, 30}  // Valid

	We can create multi dimensional anonymous arrays also
	new int[][]{{10, 20}, {30, 40, 50}};

	Based on our requirement we can give the name for anonymous array. Then it's no longer anonymous
	int[] x = new int[]{10, 20, 30};

	In the above example just to call sum() method we required an array but after completing some method call we are not using that array any more.
	Hence for this one time requirement anonymous array is the best choice.

Array Element Assignment:
	Case 1:
		In the case of primitive type of array as array elements we can provide any type which can be implicitly promoted to declared type.
		Example 1:
			int[] x = new int[5];
			x[0] = 10;
			x[1] = 'a';
			byte b = 20;
			x[2] = b;
			short s = 30;
			x[3] = s;
		In the case of float type of arrays the allowed data types are byte, short, char, int, long, float.

	Case 2:
		In the case of object type arrays as array elements we can provide either declared type object or it's child class object.
		Example 1:
			Object[] a = new Object[10];
			a[0] = new Object();
			a[1] = new String("Test");
			a[2] = new Integer(10);

		Example 2:
			Number[] n = new Number[10];
			n[0] = new Integer(10);
			n[1] = new Double(10.5);
			n[2] = new String("Test"); // RTE -> incompatible type found String required Number

	Case 3:
		For Interface type arrays as array elements it's implementation class objects are allowed.
		Example 1:
			Runnable[] r = new Runnable[10];
			r[0] = new Throw();
			r[1] = new String("Test"); // RTE -> incompatible type found j.l.String required j.l.Runnable

Array Variable Assignment:
	Case 1:
		Element level promotions are not applicable at array level. for exp char element can be promoted to int type where as char array can't be
		promoted to int array.
		Example 1:
			int[] x = {10, 20, 30, 40};
			char[] ch = {'a', 'b', 'c', 'd'};

			int[] a = x;	// Valid
			int[] b = ch;	// Invalid - CTE -> incompatible type found char[] required int[].

		Which of the following promotions weill be performed automatically.
		char - int				// Valid
		char[] - int[]			// Invalid
		int - double			// Valid
		int[] - double[]		// Invalid
		float - int				// Invalid
		float[] - int[]			// Invalid
		String - Object			// Valid
		String[] - Object[]		// Valid

		But in the case of Object type arrays child class type array can be promoted to parent class type array.
		Example 2:
			String[] s = {'a', 'b', 'c', 'd'};
			Object[] o = s;

	Case 2:
		Whenever we are assigning one array to another array, internal elements won't be copied, just reference variable will be reassigned.
		Example 1:
			int[] a = {10, 20, 30, 40, 50, 60};
			int[] b = [70, 80};

			a = b; // Valid
			b = a; // Valid
	Case 3:
		Whenever we are assigning one array to another array, the dimensions must be matched. For exp int the place of one dimensional int array
		we should provide one dimensional array only. If we are trying to provide any other dimension then we'll get compile time error.
		Example 1:
			int[][] a = new int[3][];
			a[0] = new int[4][3];	//CTE -> incompatible type found 2D array required 1D array
			a[0] = 10;				// CTE -> incompatible type found int required 1D array
			a[0] = new int[2];

		Whenever we are assigning one array to another array, both dimensions and types must be matched but sizes are not require to match.
        Example 2:
            public class Test {
                public static void main(String[] args) {
                    for (int i = 0; i <= args.length; i++) {
                        System.out.println(args[i]);
                    }
                }
            }

        java Test A B C D Enter O/P -> A B C D java.lang.ArrayIndexOutOfBoundsException
        java Test A B C Enter O/P -> A B C java.lang.ArrayIndexOutOfBoundsException
        java Test Enter O/P -> java.lang.ArrayIndexOutOfBoundsException

        Example 3:
            public class Test1 {
                public static void main(String[] args) {
                    String[] argh = {"X", "Y", "Z"};
                    args = argh;
                    for (String s : args) {
                        System.out.println(s);
                    }
                }
            }
    
        java Test A B C D Enter O/P -> X Y Z
        java Test A B C Enter O/P -> X Y Z
        java Test Enter O/P -> X Y Z

        Example 4:
            int[][] a = new int[4][3]; 	// 5 Object
            a[0] = new int[4];			// 1 Object
            a[1] = new int[2];			// 1 Object
            a = new int[3][2];			// 4 Object
    
            Q1: Total How many Objects created?
            Ans: 11
            Q2: Total how many Objects eligible for GC?
            Ans: 7
