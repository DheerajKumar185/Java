Whether class contains main method or not and whether main method is declared according to requirement or not these things won't be checked by
compiler. At run time JVM is responsible to check these things. If JVM unable to find main method then we'll get run time exception saying
NoSuchMethodError:main
	Example 1:
		public class Test {}

	javac Test.java 	// Happily code will compile
	java Test			// RTE -> java.lang.NoSuchMethodError : main

	At run time JVM always search as for the main method with the following prototype.

	public static void main()(String[] args)

	public: to call by JVM from any where
	static: without existing object also JVM has to call this method
	void: main method won't return anything to JVM
	main(): this is the name which is configure in JVM
	String[] args: command line arguments

	public class Test {
		public static void main(String[] args) {
			System.out.println("valid main");
		}
	}

	the above syntax is very strict and if we perform any change then we'll get run time exception saying NoSuchMethodError: main

	Even tho above syntax is very strict the following changes are acceptable.

	1. Instead of public static we can take static public i.e. order of modifiers is not important.
	2. We can declared string array in any acceptable form
		main(String []args), main(String args[])
	3. Instead of args we can take any valid java identifier. Example: main(String[] test)
	4. We can replace String[] with var-arg parameter. main(String... args)
	5. We can declare main method with following modifiers. final, synchronized, strictfp
		Example 2:
			public class Test {
				static public final strictfp synchronized void main(String... test) {
					System.out.println("valid main");
				}
			}

	Which of the following main method declarations are valid
		public static void main(String args)	// Invalid
		public static void Main(String[] args)	// Invalid
		public void main(String[] args)			// Invalid
		public static int main(String[] args)	// Invalid
		final synchronized strictfp public void main(String[] args)			// Invalid
		final synchronized strictfp public static void main(String[] args)	// Valid
		public static void main(String... args)								// Valid

	In which of the above cases we'll get compile time error.
	We won't get compile time error anywhere but except last 2 cases in remaining we'll get run time exception. Saying NoSuchMethodError: main

	Case 1:
		Overloading of the main method is possible but JVM will always call main(String[] args) only. The other overloaded method we have to call
		explicitly like normal method call.
		Example 3:
			public class Test1 {
				public static void main(String[] args) {
					System.out.println("String[]");
				}

				public static void main(int[] args) {
					System.out.println("int[] args");
				}
			}
		Output: String[]

	Case 2:
		Inheritance concept applicable for main method. Hence while executing child class if child doesn't contain main method then parent class
		main method will be executed.
		Example 4:
			public class Test {
				public static void main(String[] args) {
					System.out.println("Parent main");
				}
			}

			class c extends Test {}

		Input: java Test	Output: Parent main
		Input: java c		Output: Parent main

	Case 3:
		public class Test {
			public static void main(String[] args) {
				System.out.println("Parent main");
			}
		}

		class c extends Test {
			public static void main(String[] args) {
				System.out.println("Child main");
			}
		}

		Input: java Test	Output: Parent main
		Input: java c		Output: Child main

		It Seams overriding concept applicable for main method but it's not overriding and it's method hiding.

	Note:
		For main method inheritance & overloading concepts are applicable but overriding concept is not applicable. Instead of overriding
		method hiding is applicable.

1.7 Version Enhancement with respect to main method:
	Until 1.6 version, if the class doesn't contain main method then we'll get run time exception saying NoSuchMethodError:main
	But from 1.7 version onwards instead of NoSuchMethodError we'll get more elaborated error information.
	Example 1:
		public class Test {}

	Output: Error: Main method not found in class Test, please define the main method as: public static void main(String[] args)

	From 1.7 version onwards main method is mandatory to start the program execution. Hence even tho class contains static block, it won't be
	executed if the class can't contain main method.
	Example 2:
		public class Test {
			static {
				System.out.println("static block");
			}
		}

	Output 1.6v -> static block RTE NoSuchMethodError
	Output 1.7v -> Error: Main method not found in class Test, please define the main method as: public static void main(String[] args)

	Example 3:
		public class Test {
			static {
				System.out.println("static block");
				System.exit(0);
			}
		}
	Output 1.6v -> static block
	Output 1.7v -> Error: Main method not found in class Test, please define the main method as: public static void main(String[] args)

	Example 4:
		public class Test1 {
			static {
				System.out.println("static block");
			}

			public static void main(String[] args) {
				System.out.println("main method");
			}
		}
	Output 1.6v -> static block main method
	Output 1.7v -> static block main method

	Q. Without writing main method is it possible to print some statement to the console?
	A. Yes by static block but this rule is applicable until 1.6 V. But from 1.7 version it's impossible to print some statement to the console.
		without writing main method.
