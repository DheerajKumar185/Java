Increment and Decrement Operators:
	Case 1:
		We can apply increment & decrement operators only for variables but not for constant values. If we are trying to apply for constant values
		then we'll get compile time error.
		Example 1:
			public class Test {
				public static void main(String[] args) {
					int x = 10;
					int y = ++x;
					System.out.println(y);		// Output: 11
				}
			}

		Example 2:
		    public class Test {
                public static void main(String[] args) {
                    int x = 10;
                    int y = x++;
                    System.out.println(x);		// Output: 11
                    System.out.println(y);      // Output: 10
                }
            }

		Example 3:
			public class Test {
				public static void main(String[] args) {
					int x = 10;
					int y = ++10;	//CTE -> error: unexpected type -> int y = ++10; required: variable found:    value
					System.out.println(y);
				}
			}

	Case 2:
		Nesting of Increment & Decrement operators not allowed.
		Example 1:
			public class Test {
				public static void main(String[] args) {
					int x = 10;
					int y = ++ (++x);	//CTE -> error: unexpected type -> int y = ++10; required: variable found:    value
					System.out.println(y);
				}
			}

	Case 3:
		For final variables we can't apply Increment & Decrement operators.
		Example 1:
			public class Test {
				public static void main(String[] args) {
					final int x = 10;
					x++;		// CTE -> error: cannot assign a value to final variable x
					System.out.println(x);
				}
			}

	Case 4:
		We can apply Increment & Decrement operators for every primitive type except boolean.
		Example 1:
			public class Test {
				public static void main(String[] args) {
					char x = 'a';
					x++;
					System.out.println(x);	// Output: b
				}
			}

		Example 2:
			public class Test {
				public static void main(String[] args) {
					double d = 10.5;
					d++;
					System.out.println(d);	// Output: 11.5
				}
			}

		Example 3:
			public class Test {
				public static void main(String[] args) {
					boolean b = true;
					b++;
					System.out.println(b);	// CTE -> error: bad operand type boolean for unary operator '++'
				}
			}

	Case 5:
		Difference between b++ & b = b + 1 : But in case of increment & decrement operators internal type casting perform automatically
		If we apply any arithmetic operator between two variable a & b. The result type is always max(int, type of a, type of b).
		Example 1:
			public class Test {
				public static void main(String[] args) {
					byte a = 10;
					byte b = 20;
					byte c = a + b;	// CTE -> error: incompatible types: possible lossy conversion from int to byte
					System.out.println(c);
				}
			}
		Example 2:
			public class Test {
				public static void main(String[] args) {
					byte a = 10;
					byte b = 20;
					byte c = (byte) (a + b);
					System.out.println(c);	// Output: 30
				}
			}
		Example 3:
			public class Test {
				public static void main(String[] args) {
					byte b = 20;
					b = b + 1;	// CTE -> incompatible types: possible lossy conversion from int to byte
					System.out.println(b);
				}
			}

		Example 4:
			public class Test {
				public static void main(String[] args) {
					byte b = 20;
					b = (byte) (b + 1);
					System.out.println(b);	// Output: 21
				}
			}
		Example 5:
			public class Test {
				public static void main(String[] args) {
					byte b = 10;
					b++;	// (byte) (b + 1); - internal type casting perform automatically
					System.out.println(b);	// Output: 11
				}
			}

Arithmetic Operators: (+, -, *, /, %)
	If we apply any arithmetic operator between two variable, the result type is always max (int, type of a, type of b)
	byte + byte = int;
	byte + short = int;
	short + short = int;
	byte + long = long;
	long + double = double;
	float + long = float;
	char + char = int;
	char + double = double;
									byte-short___
										     \ int - long - float - double
									char_________/

	Example 1:
		System.out.println('a' +'b');	// Output (97 + 98) = 195
		System.out.println('a' + 0.98);	// Output (97 + 0.98)

	Infinity:
		In Integral arithmetic (byte, short, int, long) there is not way to represent infinity. Hence if Infinity is the result we'll get
		ArithmeticException in integral arithmetic.
	Example 1:
		System.out.println(10/0);	// RTE : java.lang.ArithmeticException: / by zero

	But in floating point arithmetic (float & double) there is a way to represent infinity. For this Float and Double classes contains the
	following 2 constant. POSITIVE_INFINITY, NEGATIVE_INFINITY. Hence even tho result is infinity we won't get any arithmetic exception in floating
	point arithmetic.
	Example 2:
		System.out.println(10/0.0);		// Infinity
		System.out.println(-10/0.0);	// -Infinity

	NaN(Not a Number):
		Int integral arithmetic (byte, short, int, long) there is no way to represent undefined results. Hence if the result is undefined we'll get
		RTE saying ArithmeticException.
	Example 1:
		System.out.println(0/0);		// RTE: java.lang.ArithmeticException

	But in floating point arithmetic (float, double) there is a way to represent undefined results. For this Float & Double classes contains NAN
	constant. Hence if the result is undefined we won't get any ArithmeticException in floating point arithmetic.
	Example 2:
		System.out.println(0.0/0);		// NaN
		System.out.println(-0.0/0);		// NaN
		System.out.println(-0/0.0);		// NaN

	Note: For any x value including NaN the following expressions return false
		x < NaN
		x <= NaN
		x > NaN
		x >= NaN
		x == NaN

	For any x value including NaN the following expressions return true
		x != NaN

		Example 3:
			System.out.println(10 < Float.NaN);			// false
			System.out.println(10 <= Float.NaN);			// false
			System.out.println(10 > Float.NaN);			// false
			System.out.println(10 >= Float.NaN);			// false
			System.out.println(10 == Float.NaN);			// false
			System.out.println(Float.NaN == Float.NaN);		// false
			System.out.println(10 != Float.NaN);			// true
			System.out.println(Float.NaN != Float.NaN);		// true

	ArithmeticException:
		It is runtime Exception but not compile time error
		It is possible only in Integral arithmetic but not in Floating point arithmetic.
		The only operators which cause ArithmeticException are / or %

String Concatenation Operators (+):
	The only overloaded operator in java is '+' operator. Sometimes it access Arithmetic addition operator and sometime it access String concatenation
	operator.
	If at least one argument is String type then + operator access concatenation operator and if both arguments are number type then + operator access
	arithmetic addition operator.
	Example 1:
		public class Test {
			public static void main(String[] args) {
				String a = "Test";
				int b = 10, c = 20, d = 30;
				System.out.println(a+b+c+d);		// Test102030
				System.out.println(b+c+d+a);		// 60Test
				System.out.println(b+c+a+d);		// 30Test30
				System.out.println(b+a+c+d);		// 10Test2030
			}
		}
	
	Example 2:
		Consider the following declaration, Which of the following expressions are valid?
		public class Test {
			public static void main(String[] args) {
				String a = "Test";
				int b = 10, c = 20, d = 30;
				a = b+c+d;	//	CTE ->	error: incompatible types: int cannot be converted to String
				a = a+b+c;
				b = a+c+d;	//	CTE ->	error: incompatible types: String cannot be converted to int
				b = b+c+d;
			}
		}

Relational Operators (<, <=, >, >=):
	We can apply relational operators for every primitive type except boolean.
	Example 1:
		System.out.println(10<20);			// true
		System.out.println('a'<10);			// false
		System.out.println('a'<97.6);		// true
		System.out.println('a'>'A');		// true
		System.out.println(true>false);		//	CTE -> Operator > can't be applied to java.lang.String
											//	CTE -> error: bad operand types for binary operator '>'
		
	We can't apply relational operators for Object types.
	Example 2:
		System.out.println("Test123" > "Test");	//	CTE -> Operator > can't be applied to java.lang.String
												//	CTE -> error: bad operand types for binary operator '>'	
	
	Nesting of relational operators is not allowed, otherwise we'll get compile time error.
	Example 3:
		System.out.println(10<20<30);	// CTE -> CTE -> Operator > can't be applied to boolean, int
	
Equality Operators (==, !=):
	We can apply equality operators for every primitive type including boolean type also.
	Example 1:
		System.out.println(10 == 20);		// false
	        System.out.println('a' == 'b');		// false
	        System.out.println(97 == 97.0);		// true
	        System.out.println(false == false);	// true
	
	We can apply equality operators for object types also.
	For object references r1, r2. r1 == r2 returns true if and only if both references pointing to the same object(reference comparing or address).
	Example 2:
		Thread t1 = new Thread();
	        Thread t2 = new Thread();
	        Thread t3 = t1;
	        System.out.println(t1 == t2);	// false
	        System.out.println(t1 == t3);	// true
		
	If we apply equality operators for object types then compulsory there should be some relational between argument type(either child to parent or
	parent to type or same type) otherwise we'll get CTE saying incomparable types.
	Example 3:
		Thread t = new Thread();
	        Object o = new Object();
	        String s = new String("Test");
	        System.out.println(t == o);	// false
	        System.out.println(o == s);	// false
	        System.out.println(s == t);	// CTE -> error: incomparable types: String and Thread
	
Difference between == operator & .equals() method:
	In general we can use == operator for reference comparison(address comparison) and .equals method for content comparison.
	Example 1:
		String s1 = new String("Test");
	        String s2 = new String("Test");
	        System.out.println(s1 == s2);		// false
	        System.out.println(s1.equals(s2));	// true
	
	Note: For any object reference are,	== null is always false but null == null is always true.
	Example 2:
		String s1 = new String("Test");
	        String s2 = null;        
	        System.out.println(s1 == null);		// false
	        System.out.println(s2 == null);		// true
	        System.out.println(null == null);	// true

instanceof Operators:
	We can use instanceof operator to check whether the given object is of particular type of not.
	Example 1:
		Object o = l.get(0);
		if(o instanceof Student) {
			Student s = (Student)o;
			// perform Student type functionality
		} else if(o instanceof Customer) {
			Customer c = (Customer) 0;
			// perform Customer type functionality
		}
		
	Syntax: r instanceof X
	r -> Object reference
	X -> class/interface
	
	Example 2:
		Thread t = new Thread();
        	System.out.println(t instanceof Thread);		// true
        	System.out.println(t instanceof Object);		// true
        	System.out.println(t instanceof Runnable);		// true
	
	Example 3:
		To use instanceof operator compulsory there should be some relation between argument types(either child to parent or parent to child or same)
		otherwise we'll get CTE inconvertible type.
		
		Thread t = new Thread();
        	System.out.println(t instanceof String);		// CTE -> error: incompatible types: Thread cannot be converted to String
		
	Note: For any class/interface X, null instanceof X is always false.
	
	Example 4:
		System.out.println(null instanceof Thread);
        	System.out.println(null instanceof Runnable);

Bitwise Operators(&, |, ^): Applicable for both boolean & Integral
	& -> AND => Returns true if both arguments are true
	| -> OR => Returns true if at lest one argument is true
	^ -> X-OR => Returns true if both arguments are different
	
	Example 1:
		System.out.println(true & false)	// false
		System.out.println(true | false)	// true
		System.out.println(true ^ false)	// true
	
	Example 2:
		System.out.println(4 & 5);	// Output: 4 (100 & 101 = 100)
        	System.out.println(4 | 5);	// Output: 5 (100 & 101 = 101)
        	System.out.println(4 ^ 5);	// Output: 1 (100 & 101 = 001)
	
Bitwise Complement Operator(~): Applicable only for Integral type but not for boolean
	We can apply this operator only for integral types but not for boolean. If we are trying to apply for boolean then we'll get CTE.
	Example 1:
		System.out.println(~true);	// CTE -> error: bad operand type boolean for unary operator '~'
        	System.out.println(~4);		// Output: -5 (100 = 101)
	
	Note: The most significant access signed bit. 0 means positive number 1 means negative number. +ve number will be represented directly in memory
		where as -ve numbers will be represented indirectly memory in 2's complement form.
	
Boolean Complement Operator(!): Applicable only for boolean but not for Integral
	We can apply this operator only for boolean types but not for integral types.
	Example 1:
		System.out.println(!4);		// CTE -> operator ! can't be applied to int.
        	System.out.println(!true);	// false
