Increment and Decrement Operators:
	Case 1:
		We can apply increment & decrement operators only for variables but not for constant values. If we are trying to apply for constant values
		then we'll get compile time error.
		Example 1:
			public class Test {
				public static void main(String[] args) {
					int x = 10;
					int y = ++x;
					System.out.println(y);		// Output: 11
				}
			}

		Example 2:
		    public class Test {
                public static void main(String[] args) {
                    int x = 10;
                    int y = x++;
                    System.out.println(x);		// Output: 11
                    System.out.println(y);      // Output: 10
                }
            }

		Example 3:
			public class Test {
				public static void main(String[] args) {
					int x = 10;
					int y = ++10;	//CTE -> error: unexpected type -> int y = ++10; required: variable found:    value
					System.out.println(y);
				}
			}

	Case 2:
		Nesting of Increment & Decrement operators not allowed.
		Example 1:
			public class Test {
				public static void main(String[] args) {
					int x = 10;
					int y = ++ (++x);	//CTE -> error: unexpected type -> int y = ++10; required: variable found:    value
					System.out.println(y);
				}
			}

	Case 3:
		For final variables we can't apply Increment & Decrement operators.
		Example 1:
			public class Test {
				public static void main(String[] args) {
					final int x = 10;
					x++;		// CTE -> error: cannot assign a value to final variable x
					System.out.println(x);
				}
			}

	Case 4:
		We can apply Increment & Decrement operators for every primitive type except boolean.
		Example 1:
			public class Test {
				public static void main(String[] args) {
					char x = 'a';
					x++;
					System.out.println(x);	// Output: b
				}
			}

		Example 2:
			public class Test {
				public static void main(String[] args) {
					double d = 10.5;
					d++;
					System.out.println(d);	// Output: 11.5
				}
			}

		Example 3:
			public class Test {
				public static void main(String[] args) {
					boolean b = true;
					b++;
					System.out.println(b);	// CTE -> error: bad operand type boolean for unary operator '++'
				}
			}

	Case 5:
		Difference between b++ & b = b + 1 : But in case of increment & decrement operators internal type casting perform automatically
		If we apply any arithmetic operator between two variable a & b. The result type is always max(int, type of a, type of b).
		Example 1:
			public class Test {
				public static void main(String[] args) {
					byte a = 10;
					byte b = 20;
					byte c = a + b;	// CTE -> error: incompatible types: possible lossy conversion from int to byte
					System.out.println(c);
				}
			}
		Example 2:
			public class Test {
				public static void main(String[] args) {
					byte a = 10;
					byte b = 20;
					byte c = (byte) (a + b);
					System.out.println(c);	// Output: 30
				}
			}
		Example 3:
			public class Test {
				public static void main(String[] args) {
					byte b = 20;
					b = b + 1;	// CTE -> incompatible types: possible lossy conversion from int to byte
					System.out.println(b);
				}
			}

		Example 4:
			public class Test {
				public static void main(String[] args) {
					byte b = 20;
					b = (byte) (b + 1);
					System.out.println(b);	// Output: 21
				}
			}
		Example 5:
			public class Test {
				public static void main(String[] args) {
					byte b = 10;
					b++;	// (byte) (b + 1); - internal type casting perform automatically
					System.out.println(b);	// Output: 11
				}
			}

Arithmetic Operators: (+, -, *, /, %)
	If we apply any arithmetic operator between two variable, the result type is always max (int, type of a, type of b)
	byte + byte = int;
	byte + short = int;
	short + short = int;
	byte + long = long;
	long + double = double;
	float + long = float;
	char + char = int;
	char + double = double;
									byte-short___
										     \ int - long - float - double
									char_________/

	Example 1:
		System.out.println('a' +'b');	// Output (97 + 98) = 195
		System.out.println('a' + 0.98);	// Output (97 + 0.98)

	Infinity:
		In Integral arithmetic (byte, short, int, long) there is not way to represent infinity. Hence if Infinity is the result we'll get
		ArithmeticException in integral arithmetic.
	Example 1:
		System.out.println(10/0);	// RTE : java.lang.ArithmeticException: / by zero

	But in floating point arithmetic (float & double) there is a way to represent infinity. For this Float and Double classes contains the
	following 2 constant. POSITIVE_INFINITY, NEGATIVE_INFINITY. Hence even tho result is infinity we won't get any arithmetic exception in floating
	point arithmetic.
	Example 2:
		System.out.println(10/0.0);		// Infinity
		System.out.println(-10/0.0);	// -Infinity

	NaN(Not a Number):
		Int integral arithmetic (byte, short, int, long) there is no way to represent undefined results. Hence if the result is undefined we'll get
		RTE saying ArithmeticException.
	Example 1:
		System.out.println(0/0);		// RTE: java.lang.ArithmeticException

	But in floating point arithmetic (float, double) there is a way to represent undefined results. For this Float & Double classes contains NAN
	constant. Hence if the result is undefined we won't get any ArithmeticException in floating point arithmetic.
	Example 2:
		System.out.println(0.0/0);		// NaN
		System.out.println(-0.0/0);		// NaN
		System.out.println(-0/0.0);		// NaN

	Note: For any x value including NaN the following expressions return false
		x < NaN
		x <= NaN
		x > NaN
		x >= NaN
		x == NaN

	For any x value including NaN the following expressions return true
		x != NaN

		Example 3:
			System.out.println(10 < Float.NaN);			// false
			System.out.println(10 <= Float.NaN);			// false
			System.out.println(10 > Float.NaN);			// false
			System.out.println(10 >= Float.NaN);			// false
			System.out.println(10 == Float.NaN);			// false
			System.out.println(Float.NaN == Float.NaN);		// false
			System.out.println(10 != Float.NaN);			// true
			System.out.println(Float.NaN != Float.NaN);		// true

	ArithmeticException:
		It is runtime Exception but not compile time error
		It is possible only in Integral arithmetic but not in Floating point arithmetic.
		The only operators which cause ArithmeticException are / or %

String Concatenation Operators (+):
	The only overloaded operator in java is '+' operator. Sometimes it access Arithmetic addition operator and sometime it access String concatenation
	operator.
	If at least one argument is String type then + operator access concatenation operator and if both arguments are number type then + operator access
	arithmetic addition operator.
	Example 1:
		public class Test {
			public static void main(String[] args) {
				String a = "Test";
				int b = 10, c = 20, d = 30;
				System.out.println(a+b+c+d);		// Test102030
				System.out.println(b+c+d+a);		// 60Test
				System.out.println(b+c+a+d);		// 30Test30
				System.out.println(b+a+c+d);		// 10Test2030
			}
		}
	
	Example 2:
		Consider the following declaration, Which of the following expressions are valid?
		public class Test {
			public static void main(String[] args) {
				String a = "Test";
				int b = 10, c = 20, d = 30;
				a = b+c+d;	//	CTE ->	error: incompatible types: int cannot be converted to String
				a = a+b+c;
				b = a+c+d;	//	CTE ->	error: incompatible types: String cannot be converted to int
				b = b+c+d;
			}
		}

Relational Operators (<, <=, >, >=):
	We can apply relational operators for every primitive type except boolean.
	Example 1:
		System.out.println(10<20);			// true
		System.out.println('a'<10);			// false
		System.out.println('a'<97.6);		// true
		System.out.println('a'>'A');		// true
		System.out.println(true>false);		//	CTE -> Operator > can't be applied to java.lang.String
											//	CTE -> error: bad operand types for binary operator '>'
		
	We can't apply relational operators for Object types.
	Example 2:
		System.out.println("Test123" > "Test");	//	CTE -> Operator > can't be applied to java.lang.String
												//	CTE -> error: bad operand types for binary operator '>'	
	
	Nesting of relational operators is not allowed, otherwise we'll get compile time error.
	Example 3:
		System.out.println(10<20<30);	// CTE -> CTE -> Operator > can't be applied to boolean, int
	
Equality Operators (==, !=):
	We can apply equality operators for every primitive type including boolean type also.
	Example 1:
		System.out.println(10 == 20);		// false
	        System.out.println('a' == 'b');		// false
	        System.out.println(97 == 97.0);		// true
	        System.out.println(false == false);	// true
	
	We can apply equality operators for object types also.
	For object references r1, r2. r1 == r2 returns true if and only if both references pointing to the same object(reference comparing or address).
	Example 2:
		Thread t1 = new Thread();
	        Thread t2 = new Thread();
	        Thread t3 = t1;
	        System.out.println(t1 == t2);	// false
	        System.out.println(t1 == t3);	// true
		
	If we apply equality operators for object types then compulsory there should be some relational between argument type(either child to parent or
	parent to type or same type) otherwise we'll get CTE saying incomparable types.
	Example 3:
		Thread t = new Thread();
	        Object o = new Object();
	        String s = new String("Test");
	        System.out.println(t == o);	// false
	        System.out.println(o == s);	// false
	        System.out.println(s == t);	// CTE -> error: incomparable types: String and Thread
	
Difference between == operator & .equals() method:
	In general we can use == operator for reference comparison(address comparison) and .equals method for content comparison.
	Example 1:
		String s1 = new String("Test");
	        String s2 = new String("Test");
	        System.out.println(s1 == s2);		// false
	        System.out.println(s1.equals(s2));	// true
	
	Note: For any object reference are,	== null is always false but null == null is always true.
	Example 2:
		String s1 = new String("Test");
	        String s2 = null;        
	        System.out.println(s1 == null);		// false
	        System.out.println(s2 == null);		// true
	        System.out.println(null == null);	// true

instanceof Operators:
	We can use instanceof operator to check whether the given object is of particular type of not.
	Example 1:
		Object o = l.get(0);
		if(o instanceof Student) {
			Student s = (Student)o;
			// perform Student type functionality
		} else if(o instanceof Customer) {
			Customer c = (Customer) 0;
			// perform Customer type functionality
		}
		
	Syntax: r instanceof X
	r -> Object reference
	X -> class/interface
	
	Example 2:
		Thread t = new Thread();
        	System.out.println(t instanceof Thread);		// true
        	System.out.println(t instanceof Object);		// true
        	System.out.println(t instanceof Runnable);		// true
	
	Example 3:
		To use instanceof operator compulsory there should be some relation between argument types(either child to parent or parent to child or same)
		otherwise we'll get CTE inconvertible type.
		
		Thread t = new Thread();
        	System.out.println(t instanceof String);		// CTE -> error: incompatible types: Thread cannot be converted to String
		
	Note: For any class/interface X, null instanceof X is always false.
	
	Example 4:
		System.out.println(null instanceof Thread);
        	System.out.println(null instanceof Runnable);

Bitwise Operators(&, |, ^): Applicable for both boolean & Integral
	& -> AND => Returns true if both arguments are true
	| -> OR => Returns true if at lest one argument is true
	^ -> X-OR => Returns true if both arguments are different
	
	Example 1:
		System.out.println(true & false)	// false
		System.out.println(true | false)	// true
		System.out.println(true ^ false)	// true
	
	Example 2:
		System.out.println(4 & 5);	// Output: 4 (100 & 101 = 100)
        	System.out.println(4 | 5);	// Output: 5 (100 & 101 = 101)
        	System.out.println(4 ^ 5);	// Output: 1 (100 & 101 = 001)
	
Bitwise Complement Operator(~): Applicable only for Integral type but not for boolean
	We can apply this operator only for integral types but not for boolean. If we are trying to apply for boolean then we'll get CTE.
	Example 1:
		System.out.println(~true);	// CTE -> error: bad operand type boolean for unary operator '~'
        	System.out.println(~4);		// Output: -5 (100 = 101)
	
	Note: The most significant access signed bit. 0 means positive number 1 means negative number. +ve number will be represented directly in memory
		where as -ve numbers will be represented indirectly memory in 2's complement form.
	
Boolean Complement Operator(!): Applicable only for boolean but not for Integral
	We can apply this operator only for boolean types but not for integral types.
	Example 1:
		System.out.println(!4);		// CTE -> operator ! can't be applied to int.
        	System.out.println(!true);	// false

Short Circuit Operators(&&, ||):
	These are exactly same as bitwise operators (&, |) except the following differences.
	&, |							|		&&, ||
	Both arguments should be evaluated always		|	Second arguments evaluation is optional
	Relatively performance is low				|	Relatively performance is high
	Applicable for both boolean & Integral types		|	Applicable only for boolean but not for integral types
	
	Note: 
		x && y => y will be evaluated if and only if x is true. i.e. if x is false then y won't be evaluated.
		x || y => y will be evaluated if and only if x is false. i.e. if x is true then y won't be evaluated.
	
	Example 1:		
		int x = 10, y =15;
	        if(++x < 10 & ++ y > 15) {
	            x++;
	        } else {
	            y++;
	        }
	        System.out.println(x + " " + y);		// Output: 11	17
		
		int x = 10, y =15;
	        if(++x < 10 && ++ y > 15) {
	            x++;
	        } else {
	            y++;
	        }
	        System.out.println(x + " " + y);		// Output: 11	16
		
		int x = 10, y =15;
	        if(++x < 10 | ++ y > 15) {
	            x++;
	        } else {
	            y++;
	        }
	        System.out.println(x + " " + y);		// Output: 12	16
		
		int x = 10, y =15;
	        if(++x < 10 || ++ y > 15) {
	            x++;
	        } else {
	            y++;
	        }
	        System.out.println(x + " " + y);		// Output: 12	16
		
	Example 2:
		int x = 10;
	        if(++x < 10 && x/0 > 10) {
	            System.out.println("Hello");
	        } else {
	            System.out.println("Hi");			// Output: Hi
	        }
		
		int x = 10;
	        if(++x < 10 && x/0 > 10) {
	            System.out.println("Hello");
	        } else {
	            System.out.println("Hi");			// Output: java.lang.ArithmeticException
	        }
		
	If we replace && with & then we'll get RTE saying ArithmeticException / by Zero

Type Cast Operator:
	There are 2 types of type-casting
	1. Implicit Type Casting
	2. Explicit Type Casting

	1. Implicit Type Casting:
		1. Compiler is responsible to perform implicit type-casting.
		2. Whenever we are assigning smaller data type value to bigger type variable, implicit type-casting will be performed.
		3. It is also known as widening or upcasting.
		4. There is no loss of information in this type-casting.
		5. The followings are various possible conversions where implicit type-casting will be performed.
		
		byte -> short
				\___> int -> long -> float -> double
		char ->		/
			
		Example 1:
			int x = 'a';
			System.out.println(x); // Output: 97 - compiler convert char to int automatically by implicit type-casting
			
		Example 2:
			double d = 10;
			System.out.println(d); // Output: 10.0 compiler convert int to double automatically by implicit type-casting
	
	2. Explicit Type Casting:
		1. Programmer is responsible to perform explicit type-casting.
		2. Whenever we are assigning bigger data type value to smaller data type variable, explicit type-casting is required.
		3. It is also known as narrowing or down casting
		4. There may be a chance of loss of information in this type-casting.
		5. The following are various possibility where explicit type-casting is required.
		
		byte <- short
				\___ int <- long <- float <- double
		char <-		/
				
		Example 1:
			int x = 130;
			byte b = x;		// CTE -> error: incompatible types: possible lossy conversion from int to byte
			
			int x = 130;
			byte b = (byte) x;
			System.out.println(b);
			
		Whenever we are assigning bigger data type value to smaller data type variable by explicit type-casting the most significant bits will be 
		lost. We have to consider only least significant bits (LSB).
		
		Example 2:
			int x = 150;
			short s = (short) 150;
			System.out.println(s);		// Output: 150

			byte b = (byte) x;
			System.out.println(b);		// Output: -106
			
		Example 3:
			If we assign floating point values to the integral types by explicit type-casting the digits after the decimal point will be lost.
			
			double d = 130.456;
			int i = (int) d;
			System.out.println(i);		// Output: 130

			byte b = (byte) d;
			System.out.println(b);		// Output: -126
			
Assignments Operators:
	There are 3 types of assignment operators.
	1. Simple assignment:
		Example 1: int x = 10;
	
	2. Chained assignment:
		Example 2: 
			int a, b, c, d;
			a = b = c = d = 20;
			System.out.println(a + " " + b + " " + c + " " + d);
		
		We can't perform chained assignment directly at the time of declaration.
		Example 3:
			int a = b = c = d = 20; CTE -> error: cannot find symbol. symbol:   variable b, location: class Test
			int b, c, d;
			int a = b = c = d = 20;

	3. Compound assignment:
		Sometimes assignment operator mixed with some other operator, such type of assignment operators are called compound assignment operator.
		Example 4:
			int a = 10;
			a += 20;
			System.out.println(a); // Output: 30
		
	The following are all possible compound assignment
	+=, -=, *=, /=, %=
	&=, |=, ^=
	>>=, >>>, <<=
	
	In the case of compound assignment operator, internal type-casting will be performed automatically.
	Example 5:
		byte b = 10;
		b = b + 1;
		System.out.println(b); // CTE -> error: incompatible types: possible lossy conversion from int to byte
		
		byte b = 10;
		b++;
		System.out.println(b);		// Output: 11
		
		byte b = 10;
		b += 1;						// (byte) (b + 1)
		System.out.println(b);		// Output: 11
		
		byte b = 127;
		b += 3;
		System.out.println(b);		// Output: -126
		
	Example 6:
		int a, b, c, d;
		a = b = c = d = 20;
		a += b -= c *= d /= 2;
		System.out.println(a + " " + b + " " + c + " " + d);		Output: -160 -180 200 10
		
Conditional Operator (?:):
	The only possible ternary operator in java is conditional operator.
	Syntax:	
		int x = (10 < 20) ? 30 : 40;
		System.out.println(x);		// Output: 30
		
	We can perform nesting of conditional operator also.
		int x = (10 > 20) ? 30 : (40 > 50) ? 60 : 70;
		System.out.println(x);		// Output: 70
		
New Operator:
	We can use new operator to create object.
	Example 1:
		Test t = new Test();
	
	Note:
		1. After creating an object constructor will be executed to perform initialization of an object. Hence constructor is not for creation of
			object and it's for initialization of an object.
		2. In java we have only new keyword but not delete keyword because destruction of useless object is the responsibility of garbage collector.

[] Operator:
	We can use this operator to declare and create arrays.
	Example 1:
		int[] x = new int[10];

Operator Precedence:
	1. Unary Operators:
		[], X++, X--
		++x, --x, ~, !
		new, <type>
	2. Arithmetic Operators:
		*, /, %
		+, -
	3. Shift Operators:
		>>, >>>, <<
	4. Comparison Operators:
		<, <=, >, >=, instanceof
	5. Equality Operators:
		==, !=
	6. Bitwise Operators:
		&
		^
		|
	7. Short Circuit Operators:
		&&
		||
	8. Conditional Operator:
		?:
	9. Assignment Operators:
		=, +=, -=, *= ....

Evaluation order of java operands:
	In java we have only operator precedence but not operand precedence. Before applying any operator all operands will be evaluated from left to
	right.
	Example 1:
		public static void main(String[] args) {
			System.out.println(m1(1) + m1(2) * m1(3) / m1(4) + m1(5) * m1(6));	// Output: 32
		}
		public static int m1(int i) {
			System.out.println(i);							// Output: 1 2 3 4 5 6
			return i;
		}

new() v/s newInstance():
	We can use new operator to create an object if we know class name at the beginning.
	Example 1:
		Test t = new Test();
		Student s = new Student();
		Customer c = new Customer();
	newInstance is a method present in class Class. We can use newInstance method to create object if we don't know class name at the beginning and it is
	available dynamically at runtime.
	Example 2:
		class Test {
			public static void main(String[] args) throws Exception {
				Object o = Class.forName(args[0]).newInstance();
		        System.out.println("Object created for " + o.getClass().getName());
			}
		}		
		class Student {}
		class Customer {}

		Input: java Test Student		// Output: Object created for com.example.demo.Student
		Input: java Test Customer		// Output: Object created for com.example.demo.Customer
		Input: java Test java.lang.String	// Output: Object created for java.lang.String

	In the case of new operator, based on our requirement we can invoke any constructor.
	Example 3:
		Test t = new Test();
		Test t1 = new Test(10);
		Test t2 = new Test("test");

		class Test {
			Test(int i) {
				System.out.println("no-arg constructor");
			}
			public static void main(String[] args) throws Exception {
				Object o = Class.forName(args[0]).newInstance();
		        System.out.println("Object created for " + o.getClass().getName());
			}
		}
		Input: java Test Test	// Output: InstantiationException: Test
	but newInstance instance internally call no-arg constructor. Hence to use newInstance method compulsory corresponding class should contain no-arg
	constructor otherwise we'll get runtime exception saying InstantiationException.

	newInstance() method required no-arg constructor if not present then it'll throw InstantiationException.

	While using new operator at runtime if the corresponding .class file is not available then we'll get runtime Exception
	saying java.lang.NoClassDefFoundError: Student
	Example 4:
		class Test {
			public static void main(String[] args) throws Exception {
				Student s = new Student();
			}
		}
		class Student {}
		
		At runtime if Student.class file not available then we'll get runtime exception saying NoClassDefFoundError: Student

	While using newInstance method at runtime if the corresponding .class file is not available we'll get runtime exception saying
	java.lang.ClassNotFoundException: Student
	Example 5:
		Object o = Class.forName(args[0]).newInstance();
		java test test123
		At runtime if test123 .class file not available then we'll get runtime exception saying ClassNotFoundException: test123.

Differences between new & newInstance:
________________________________________________________________________________________________________________________________________________________
		new						|				newInstance						|
----------------------------------------------------------------|---------------------------------------------------------------------------------------|
1. It's an operator in java.					|1. It's a method present in java.lang.Class						|
2. We can use new operator to create object if we know class	|2. We can use newInstance method to create Object if we don't know class name at the	|
 name at the beginning.						| beginning and it's available dynamically at runtime.					|
3. To use new operator class not require to contain no-arg	|3. To use newInstance method compulsory class should contain no-arg constructor	|
 constructor.							| otherwise we'll get runtime exception saying InstantiationException.			|
4. At runtime if the corresponding .class not available then	|4. At runtime time if the corresponding .class file not available then we'll get	|
 we'll get runtime exception saying NoClassDefFoundError, which | runtime exception saying ClassNotFoundException, which is checked.			|
 is unchecked							|											|
--------------------------------------------------------------------------------------------------------------------------------------------------------
Differences between ClassNotFoundException and NoClassDefFoundError:
________________________________________________________________________________________________________________________________________________________|
		ClassNotFoundException				|				NoClassDefFoundError					|
----------------------------------------------------------------|---------------------------------------------------------------------------------------|
1. For hard coded class name's, at runtime if the corresponding	|1. For dynamically provided class name at runtime if the corresponding.class file is	|
 .class file is not available then we'll get runtime exception	| not available then we'll get runtime exception saying ClassNotFoundException,		|
 saying NoClassDefFoundError, which is unchecked.		| Which is checked exception.								|
 Example: Test t = new Test().					| Example: Object o = Class.forName(args[0]).newInstance(); java Test Student		|
 At runtime if Test.class file isn't available then we'll get 	| At runtime if Student.class not available then we'll get runtime exception		|
 runtime exception saying NoClassDefFoundError: Test		| saying ClassNotFoundException: Student						|
--------------------------------------------------------------------------------------------------------------------------------------------------------
Differences between instanceof and isInstance()
________________________________________________________________________________________________________________________________________________________
		instanceof					|				isInstance()						|
----------------------------------------------------------------|---------------------------------------------------------------------------------------|
1. instanceof is an operator in java.				| isInstance is a method present in java.lang.Class.					|
2. We can use instanceof to check whether give object is of	| We can use isInstance method to check whether the give object is particular		|
	particular type of not and we know the type at the      | type or not and we don't know the type at the beginning and it's available		|
	beginning                                               | dynamically at runtime.								|
	Example:						| 											|
		Thread t = new Thread()				| Example:										|
		System.out.println(t instanceof Runnable);	|	public class Test {								|
		System.our.println(t instanceof Object);	|		public static void main(String[] args) throws Exception {		|
								|			Thread t = new Thread();					|
								|			System.out.println(Class.forName(args[0]).isInstance(t));	|	
								|		}									|
								|	}										|
								|											|
								|	java Test java.lang.Runnable	// Output: true					|
								|	java Test java.lang.String	// Output: false				|
--------------------------------------------------------------------------------------------------------------------------------------------------------
Note: isInstance() is method equivalent of instanceof operator.
